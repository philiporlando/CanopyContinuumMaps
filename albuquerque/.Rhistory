z*posneg
}
# determine relative population per decile, and allocate sensors accordingly!
for(i in deciles) {
tot_sensors <- 30
lower_quantile <- round2(quantile(grid_sp@data$population
,i
,type = 5 # for deciles
)
,0
)
upper_quantile <- round2(quantile(grid_sp@data$population
,i+0.10
,type = 5 # for deciles
)
,0
)
sample <- subset(grid_sp@data
,population >= lower_quantile & population < upper_quantile
)
n_grid <- length(sample$id)
dec_pop <- round2(sum(sample$population), 0)
tot_pop <- round2(sum(grid_sp@data$population), 0)
rel_pop <- dec_pop/tot_pop
rel_n <- rel_pop*tot_sensors
rel_n_round <- round2(rel_n, 0)
n_deciles <- rbind(n_deciles
,data.frame(decile = i+0.10
,pop = upper_quantile
,n_grid = n_grid
,dec_pop = dec_pop
,tot_pop = tot_pop
,rel_pop = rel_pop
,rel_n = rel_n
,rel_n_round = rel_n_round
)
,stringsAsFactors = FALSE
)
print(n_deciles)
}
n_deciles
sum(n_deciles$rel_n_round)
# store this output as a csv for later
write.csv(n_deciles, "./deciles.csv")
# doublecheck our deciles
dec <- quantile(grid_sp@data$population, prob = seq(0, 1, length = 11), type = 5)
quantile(grid_sp@data$population, prob = seq(0, 1, length = 5), type = 7)
summary(grid_sp@data$population)
# inspect population density distribution and cut points
ggplot(data = grid_sp@data, aes(population)) +
geom_histogram(
#binwidth = length(population)
binwidth = 10
) +
geom_vline(xintercept = dec, color = "firebrick") +
xlab("Population Density (km^-2)") +
ylab("Grid Cells (n)") +
theme_bw()
pal1 <- c("wheat1", "red3")
plot(class
,pal = pal1
,main = "Decile"
,xlab = "Population Density km^-2)"
,ylab = "Percentile"
)
# associate each grid id to each decile (could of vectorized this probably...)
dec_10 <- subset(grid_sp@data
,population <= n_deciles$pop[1]
)
dec_20 <- subset(grid_sp@data
,population > n_deciles$pop[1] & population <= n_deciles$pop[2]
)
dec_30 <- subset(grid_sp@data
,population > n_deciles$pop[2] & population <= n_deciles$pop[3]
)
dec_40 <- subset(grid_sp@data
,population > n_deciles$pop[3] & population <= n_deciles$pop[4]
)
dec_50 <- subset(grid_sp@data
,population > n_deciles$pop[4] & population <= n_deciles$pop[5]
)
dec_60 <- subset(grid_sp@data
,population > n_deciles$pop[5] & population <= n_deciles$pop[6]
)
dec_70 <- subset(grid_sp@data
,population > n_deciles$pop[6] & population <= n_deciles$pop[7]
)
dec_80 <- subset(grid_sp@data
,population > n_deciles$pop[7] & population <= n_deciles$pop[8]
)
dec_90 <- subset(grid_sp@data
,population > n_deciles$pop[8] & population <= n_deciles$pop[9]
)
dec_100 <- subset(grid_sp@data
,population > n_deciles$pop[9] & population <= n_deciles$pop[10]
)
# set random seed for reproducibility
set.seed(8)
# randomly sample grid cells within each decile, where n is weighted by relative population
sample_10 <- sample(dec_10$id
,size = n_deciles$rel_n_round[1]
,replace = FALSE
)
sample_20 <- sample(dec_20$id
,size = n_deciles$rel_n_round[2]
,replace = FALSE
)
sample_30 <- sample(dec_30$id
,size = n_deciles$rel_n_round[3]
,replace = FALSE
)
sample_40 <- sample(dec_40$id
,size = n_deciles$rel_n_round[4]
,replace = FALSE
)
sample_50 <- sample(dec_50$id
,size = n_deciles$rel_n_round[5]
,replace = FALSE
)
sample_60 <- sample(dec_60$id
,size = n_deciles$rel_n_round[6]
,replace = FALSE
)
sample_70 <- sample(dec_70$id
,size = n_deciles$rel_n_round[7]
,replace = FALSE
)
sample_80 <- sample(dec_80$id
,size = n_deciles$rel_n_round[8]
,replace = FALSE
)
sample_90 <- sample(dec_90$id
,size = n_deciles$rel_n_round[9]
,replace = FALSE
)
sample_100 <- sample(dec_100$id
,size = n_deciles$rel_n_round[10]
,replace = FALSE
)
# append these results to a single vector
sample_id <- c(sample_10
,sample_20
,sample_30
,sample_40
,sample_50
,sample_60
,sample_70
,sample_80
,sample_90
,sample_100
)
# filter our original grid data by the matching sample id
grid_sample <- grid_sp[grid_sp@data$id %in% sample_id, ]
# manually adjusting for adjacency (throwing our stratified random sampling out the window...)
sample_id_adj <- data.frame(sample_id) # need to convert to dataframe to use legacy code from AirAdvice days...
sample_id_adj$sample_id <- ifelse(sample_id_adj$sample_id == "142", "141"
,ifelse(sample_id_adj$sample_id == "177", "178"
,ifelse(sample_id_adj$sample_id == "252", "253"
,ifelse(sample_id_adj$sample_id == "299", "316"
,ifelse(sample_id_adj$sample_id == "303", "320"
,ifelse(sample_id_adj$sample_id == "328", "345"
,sample_id_adj$sample_id
)
)
)
)
)
)
# create a second layer of grid cells that are not adjacent (only by corners, not sides)
grid_sample2 <- grid_sp[grid_sp@data$id %in% sample_id_adj$sample_id, ]
# color code
levels <- 10
plotclr <- brewer.pal(levels, "RdYlGn")
class2 <- classIntervals(grid_sample@data$population
,n = levels
,style = "quantile"
)
colcode2 <- findColours(class2
,rev(plotclr)
)
# population density and cell id label (target cells)
labels3 <- sprintf(
"<strong>ID: %s</strong><br/> Population Density: %s km<sup>-2</sup>"
,grid_sample2@data$id
,comma(round(grid_sample2@data$population, 0)
)
) %>%
lapply(HTML)
# labels for EPA AirData sites
labels_airnow <- sprintf(
paste0("<strong>EPA AirData: </strong><br/>"
,albuq_points@data$Local.Site.Name
)
) %>%
lapply(HTML)
# labels for existing purpleair sites
labels_pa <- sprintf(
paste0("<strong>PurpleAir: </strong><br/>"
,pa_points$site_name
)
) %>%
lapply(HTML)
# create a palette for addLegend()
legendCode <- colorBin(palette = rev(plotclr)
,domain = class$brks
,bins = round(class$brks, 2)
,pretty = FALSE # this will add extra bins if set to T
)
# create a new web map with the grid_sample layer!
m2 = leaflet() %>%
addTiles(group = "OSM (default)") %>%
#addProviderTiles(providers$CartoDB.Positron) %>%
addTiles('http://{s}.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png'
,group = "OSM (BlackAndWhite)") %>%
# provide empty grid cells as a base layer
# addPolygons(data = grid_sp
#             ,color = "black"
#             ,fillColor = "blue"
#             ,fillOpacity = 0.00
#             ,weight = 0.5
#             ,group = "Total Grid Cells"
#             ) %>%
addPolygons(data = grid_sp
,color = "black"
,fillColor = colcode
,fillOpacity = 0.20
,weight = 0.5
#,popup = pop1
# interaction
,group = "Total Grid Cells"
,highlight = highlightOptions(
weight = 5
,color = "#666"
,dashArray = ""
,fillOpacity = 0.7
#,bringToFront = TRUE
)
,label = labels
,labelOptions = labelOptions(
style = list("font-weight" = "normal"
, padding = "3px 8px"
)
,textsize = "15px"
,direction = "auto"
)
) %>%
# add grid cells from our sample id list
addPolygons(data = grid_sample
,color = "black"
,fillColor = colcode2
#,fillColor = NULL
,fillOpacity = 0.00001
,weight = 2.5
,opacity = 1
#,popup = pop1
# interaction
,group = "Target Grid Cells"
,highlight = highlightOptions(
weight = 5
,color = "#666"
#,color = NULL
,dashArray = ""
,fillOpacity = 0.000001
#,bringToFront = TRUE
)
,label = labels2
,labelOptions = labelOptions(
style = list("font-weight" = "normal"
,padding = "3px 8px"
)
,textsize = "15px"
,direction = "auto"
)
) %>%
# add grid cells from our sample id list
addPolygons(data = grid_sample2
,color = "black"
,fillColor = colcode2
#,fillColor = NULL
,fillOpacity = 0.00001
,weight = 2.5
,opacity = 1
#,popup = pop1
# interaction
,group = "Target Grid Cells Adjusted"
,highlight = highlightOptions(
weight = 5
,color = "#666"
#,color = NULL
,dashArray = ""
,fillOpacity = 0.000001
#,bringToFront = TRUE
)
,label = labels3
,labelOptions = labelOptions(
style = list("font-weight" = "normal"
,padding = "3px 8px"
)
,textsize = "15px"
,direction = "auto"
)
) %>%
# pull in regional monitoring sites
addCircleMarkers(data = albuq_points
,fillColor = "blue"
,color = "blue"
,weight = 1.5
,fillOpacity = 0.5
#,popup = airnow_pop
,group = "Regional Monitoring Sites"
,label = labels_airnow
,labelOptions = labelOptions(
style = list("font-weight" = "normal"
, padding = "3px 8px"
)
,textsize = "15px"
,direction = "auto"
)
) %>%
# pull in existing PurpleAir monitors
addCircleMarkers(data = pa_points
,fillColor = "purple"
,fillOpacity = 0.25 # since there are two circles per geometry... (B sensor)
,color = "purple"
,weight = 1.5
#,popup = pa_pop
,group = "Existing PurpleAir"
,label = labels_pa
,labelOptions = labelOptions(
style = list("font-weight" = "normal"
, padding = "3px 8px"
)
,textsize = "15px"
,direction = "auto"
)
) %>%
addLayersControl(
baseGroups = c("OSM  (BlackAndWhite)"
,"OSM (default)"
)
,overlayGroups = c("Total Grid Cells"
,"Target Grid Cells"
,"Target Grid Cells Adjusted"
,"Regional Monitoring Sites"
,"Existing PurpleAir"
)
,options = layersControlOptions(collapsed = TRUE)
,position = "topright"
) %>%
# turns the unadjusted target grid cells off by default
hideGroup("Target Grid Cells") %>%
# add a scale bar
addScaleBar(position = "bottomleft") %>%
#
addLegend(pal = legendCode
,values = class$brks
,position = "bottomright"
,title = "<b>Population Density (km<sup>-2</sup>) </b>")
m2
## similar to previous map with just the adjusted grid cells and not the original random sample cells
m3 = leaflet() %>%
addTiles(group = "OSM (default)") %>%
#addProviderTiles(providers$CartoDB.Positron) %>%
addTiles('http://{s}.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png'
,group = "OSM (BlackAndWhite)") %>%
# provide empty grid cells as a base layer
# addPolygons(data = grid_sp
#             ,color = "black"
#             ,fillColor = "blue"
#             ,fillOpacity = 0.00
#             ,weight = 0.5
#             ,group = "Total Grid Cells"
#             ) %>%
addPolygons(data = grid_sp
,color = "black"
,fillColor = colcode
,fillOpacity = 0.20
,weight = 0.5
#,popup = pop1
# interaction
,group = "Total Grid Cells"
,highlight = highlightOptions(
weight = 5
,color = "#666"
,dashArray = ""
,fillOpacity = 0.7
#,bringToFront = TRUE
)
,label = labels
,labelOptions = labelOptions(
style = list("font-weight" = "normal"
, padding = "3px 8px"
)
,textsize = "15px"
,direction = "auto"
)
) %>%
# # add grid cells from our sample id list
# addPolygons(data = grid_sample
#             ,color = "black"
#             ,fillColor = colcode2
#             #,fillColor = NULL
#             ,fillOpacity = 0.00001
#             ,weight = 2.5
#             ,opacity = 1
#             #,popup = pop1
#             # interaction
#             ,group = "Target Grid Cells"
#             ,highlight = highlightOptions(
#               weight = 5
#               ,color = "#666"
#               #,color = NULL
#               ,dashArray = ""
#               ,fillOpacity = 0.000001
#               #,bringToFront = TRUE
#             )
#             ,label = labels2
#             ,labelOptions = labelOptions(
#               style = list("font-weight" = "normal"
#                            ,padding = "3px 8px"
#               )
#               ,textsize = "15px"
#               ,direction = "auto"
#             )
# ) %>%
# add grid cells from our sample id list
addPolygons(data = grid_sample2
,color = "black"
,fillColor = colcode2
#,fillColor = NULL
,fillOpacity = 0.00001
,weight = 2.5
,opacity = 1
#,popup = pop1
# interaction
,group = "Target Grid Cells"
,highlight = highlightOptions(
weight = 5
,color = "#666"
#,color = NULL
,dashArray = ""
,fillOpacity = 0.000001
#,bringToFront = TRUE
)
,label = labels3
,labelOptions = labelOptions(
style = list("font-weight" = "normal"
,padding = "3px 8px"
)
,textsize = "15px"
,direction = "auto"
)
) %>%
# pull in regional monitoring sites
addCircleMarkers(data = albuq_points
,fillColor = "blue"
,color = "blue"
,weight = 1.5
,fillOpacity = 0.5
#,popup = airnow_pop
#,bringToFront = TRUE
,group = "Regional Monitoring Sites"
,label = labels_airnow
,labelOptions = labelOptions(
style = list("font-weight" = "normal"
, padding = "3px 8px"
)
,textsize = "15px"
,direction = "auto"
)
) %>%
# pull in existing PurpleAir monitors
addCircleMarkers(data = pa_points
,fillColor = "purple"
,fillOpacity = 0.25 # since there are two circles per geometry... (B sensor)
,color = "purple"
,weight = 1.5
#,popup = pa_pop
#,bringToFront = TRUE
,group = "Existing PurpleAir"
,label = labels_pa
,labelOptions = labelOptions(
style = list("font-weight" = "normal"
, padding = "3px 8px"
)
,textsize = "15px"
,direction = "auto"
)
) %>%
addLayersControl(
baseGroups = c("OSM  (BlackAndWhite)"
,"OSM (default)"
)
,overlayGroups = c("Total Grid Cells"
#,"Target Grid Cells" # original random sample
,"Target Grid Cells" # adjusted target cells renamed
,"Regional Monitoring Sites"
,"Existing PurpleAir"
)
,options = layersControlOptions(collapsed = FALSE)
,position = "topright"
) %>%
# # turns the unadjusted target grid cells off by default
# hideGroup("Target Grid Cells") %>%
# # add a scale bar
# addScaleBar(position = "bottomleft") %>%
#
addLegend(pal = legendCode
,values = class$brks
,position = "bottomright"
,title = "<b>Population Density (km<sup>-2</sup>) </b>")
m3
